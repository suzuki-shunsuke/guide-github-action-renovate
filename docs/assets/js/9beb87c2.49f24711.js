"use strict";(self.webpackChunkguide_github_action_renovate=self.webpackChunkguide_github_action_renovate||[]).push([[80],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),p=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(r),m=o,f=c["".concat(u,".").concat(m)]||c[m]||d[m]||a;return r?n.createElement(f,i(i({ref:t},s),{},{components:r})):n.createElement(f,i({ref:t},s))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1016:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:600},i="Changelog",l={unversionedId:"changelog",id:"changelog",title:"Changelog",description:"2023-02-21",source:"@site/docs/changelog.md",sourceDirName:".",slug:"/changelog",permalink:"/guide-github-action-renovate/changelog",draft:!1,editUrl:"https://github.com/suzuki-shunsuke/guide-github-action-renovate/edit/main/docs/changelog.md",tags:[],version:"current",sidebarPosition:600,frontMatter:{sidebar_position:600},sidebar:"tutorialSidebar",previous:{title:"Summary - Team Development",permalink:"/guide-github-action-renovate/summary-team-development"}},u={},p=[{value:"2023-02-21",id:"2023-02-21",level:2},{value:"Merge <code>renovate</code> workflow to <code>one</code> workflow",id:"merge-renovate-workflow-to-one-workflow",level:3},{value:"GitHub Apps permissions: <code>workflows: write</code> is required to update GitHub Actions Workflows",id:"github-apps-permissions-workflows-write-is-required-to-update-github-actions-workflows",level:3},{value:"Support updating branch by pull request comment",id:"support-updating-branch-by-pull-request-comment",level:3},{value:"2023-04-05",id:"2023-04-05",level:2}],s={toc:p},c="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(c,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"changelog"},"Changelog"),(0,o.kt)("h2",{id:"2023-02-21"},"2023-02-21"),(0,o.kt)("h3",{id:"merge-renovate-workflow-to-one-workflow"},"Merge ",(0,o.kt)("inlineCode",{parentName:"h3"},"renovate")," workflow to ",(0,o.kt)("inlineCode",{parentName:"h3"},"one")," workflow"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/suzuki-shunsuke/guide-github-action-renovate/pull/14"},"#14")," ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/aquaproj/example-update-checksum/pull/162"},"aquaproj/example-update-checksum#162")),(0,o.kt)("p",null,"We created ",(0,o.kt)("inlineCode",{parentName:"p"},"renovate")," workflow before because we misunderstood the specification of GitHub Environment's Deployment branches.\nBut we found we can run GitHub Actions jobs with GitHub Actions Environment in ",(0,o.kt)("inlineCode",{parentName:"p"},"one")," workflow, so we merged ",(0,o.kt)("inlineCode",{parentName:"p"},"renovate")," workflow to ",(0,o.kt)("inlineCode",{parentName:"p"},"one")," workflow."),(0,o.kt)("h3",{id:"github-apps-permissions-workflows-write-is-required-to-update-github-actions-workflows"},"GitHub Apps permissions: ",(0,o.kt)("inlineCode",{parentName:"h3"},"workflows: write")," is required to update GitHub Actions Workflows"),(0,o.kt)("p",null,"If GitHub Apps doesn't have a permission ",(0,o.kt)("inlineCode",{parentName:"p"},"workflows: write"),", GitHub Apps can't enable auto-merge."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"auto-merge was automatically disabled 8 minutes ago",(0,o.kt)("br",{parentName:"p"}),"\n","Tried to create or update workflow without ",(0,o.kt)("inlineCode",{parentName:"p"},"workflows")," permission")),(0,o.kt)("h3",{id:"support-updating-branch-by-pull-request-comment"},"Support updating branch by pull request comment"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Add a workflow ",(0,o.kt)("inlineCode",{parentName:"li"},"update-branch"))),(0,o.kt)("h2",{id:"2023-04-05"},"2023-04-05"),(0,o.kt)("p",null,"Fix ",(0,o.kt)("inlineCode",{parentName:"p"},"renovate/*"),"'s branch protection rules.\nEnable ",(0,o.kt)("inlineCode",{parentName:"p"},"Allow force pushes")," to allow Renovate to rebase branches."))}d.isMDXComponent=!0}}]);