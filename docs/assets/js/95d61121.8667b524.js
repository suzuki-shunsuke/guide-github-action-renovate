"use strict";(self.webpackChunkguide_github_action_renovate=self.webpackChunkguide_github_action_renovate||[]).push([[609],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),p=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(u.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),s=p(n),k=r,d=s["".concat(u,".").concat(k)]||s[k]||c[k]||i;return n?a.createElement(d,l(l({ref:t},m),{},{components:n})):a.createElement(d,l({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=k;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[s]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},2117:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:500},l="Summary - Team Development",o={unversionedId:"summary-team-development",id:"summary-team-development",title:"Summary - Team Development",description:"Repository Setting",source:"@site/docs/summary-team-development.md",sourceDirName:".",slug:"/summary-team-development",permalink:"/guide-github-action-renovate/summary-team-development",draft:!1,editUrl:"https://github.com/suzuki-shunsuke/guide-github-action-renovate/edit/main/docs/summary-team-development.md",tags:[],version:"current",sidebarPosition:500,frontMatter:{sidebar_position:500},sidebar:"tutorialSidebar",previous:{title:"Summary - Personal Project",permalink:"/guide-github-action-renovate/summary-personal-project"},next:{title:"Changelog",permalink:"/guide-github-action-renovate/changelog"}},u={},p=[{value:"Repository Setting",id:"repository-setting",level:2},{value:"Branch Protection Rules",id:"branch-protection-rules",level:2},{value:"Personal Access Token",id:"personal-access-token",level:2},{value:"GitHub App",id:"github-app",level:2},{value:"GitHub Environment",id:"github-environment",level:2},{value:"GitHub Actions Workflows",id:"github-actions-workflows",level:2}],m={toc:p},s="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"summary---team-development"},"Summary - Team Development"),(0,r.kt)("h2",{id:"repository-setting"},"Repository Setting"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Allow auto-merge")),(0,r.kt)("h2",{id:"branch-protection-rules"},"Branch Protection Rules"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"main"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Require a pull request before merging"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Require approvals")," (1 approval)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Dismiss stale pull request approvals when new commits are pushed")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Require review from Code Owners")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Require approval of the most recent reviewable push")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Require status checks to pass before merging"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Status checks that are required."),": ",(0,r.kt)("inlineCode",{parentName:"li"},"status-check")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Do not allow bypassing the above settings")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"renovate/*")," ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Do not allow bypassing the above settings")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Restrict who can push to matching branches"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Restrict pushes that create matching branches"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"renovate")),(0,r.kt)("li",{parentName:"ul"},"Dedicated GitHub App"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Allow deletions"),": Allow to delete pull request branches")))),(0,r.kt)("h2",{id:"personal-access-token"},"Personal Access Token"),(0,r.kt)("p",null,"You should use ",(0,r.kt)("a",{parentName:"p",href:"https://github.blog/2022-10-18-introducing-fine-grained-personal-access-tokens-for-github/"},"fine-grained personal access token")," rather than legacy access token."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Permissions:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pull-requests: write"),": To approve a pull request")))),(0,r.kt)("h2",{id:"github-app"},"GitHub App"),(0,r.kt)("p",null,"Create a GitHub App to push commits to Renovate branches and enable auto-merge."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Permissions",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"contents: write"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Push a commit to a pull request"),(0,r.kt)("li",{parentName:"ul"},"Enable auto-merge"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pull-requests: write"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Enable auto-merge"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"workflows: write"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Enable auto-merge of pull requests updating GitHub Actions Workflows")))))),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"workflows: write")," is missing, auto-merge is disabled."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"auto-merge was automatically disabled 8 minutes ago",(0,r.kt)("br",{parentName:"p"}),"\n","Tried to create or update workflow without ",(0,r.kt)("inlineCode",{parentName:"p"},"workflows")," permission")),(0,r.kt)("h2",{id:"github-environment"},"GitHub Environment"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment"},"GitHub Environment")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"renovate"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"deployment branch rule: ",(0,r.kt)("inlineCode",{parentName:"li"},"renovate/*")),(0,r.kt)("li",{parentName:"ul"},"Secrets",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"APP_ID"),": GitHub App ID"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"APP_PRIVATE_KEY"),": GitHub App Private Key"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GH_TOKEN_APPROVE_RENOVATE_PR"),": personal access token to approve pull requests")))))),(0,r.kt)("h2",{id:"github-actions-workflows"},"GitHub Actions Workflows"),(0,r.kt)("p",null,"Create three workflows."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"test"),": ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/aquaproj/example-update-checksum/blob/main/.github/workflows/test.yaml"},"example")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"actionlint"),": ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/suzuki-shunsuke/tfcmt/blob/main/.github/workflows/actionlint.yaml"},"example"))))}c.isMDXComponent=!0}}]);