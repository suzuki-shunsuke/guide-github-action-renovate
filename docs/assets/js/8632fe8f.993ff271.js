"use strict";(self.webpackChunkguide_github_action_renovate=self.webpackChunkguide_github_action_renovate||[]).push([[168],{5788:(e,t,n)=>{n.d(t,{Iu:()=>s,yg:()=>c});var a=n(1504);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),g=u(n),y=i,c=g["".concat(p,".").concat(y)]||g[y]||m[y]||r;return n?a.createElement(c,l(l({ref:t},s),{},{components:n})):a.createElement(c,l({ref:t},s))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=y;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[g]="string"==typeof e?e:i,l[1]=o;for(var u=2;u<r;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},4236:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var a=n(5072),i=(n(1504),n(5788));const r={sidebar_position:500},l="Settings for Team Development",o={unversionedId:"settings-team-development",id:"settings-team-development",title:"Settings for Team Development",description:"Repository Setting",source:"@site/docs/settings-team-development.md",sourceDirName:".",slug:"/settings-team-development",permalink:"/guide-github-action-renovate/settings-team-development",draft:!1,editUrl:"https://github.com/suzuki-shunsuke/guide-github-action-renovate/edit/main/docs/settings-team-development.md",tags:[],version:"current",sidebarPosition:500,frontMatter:{sidebar_position:500},sidebar:"tutorialSidebar",previous:{title:"Settings for Personal Project",permalink:"/guide-github-action-renovate/settings-personal-project"},next:{title:"Changelog",permalink:"/guide-github-action-renovate/changelog"}},p={},u=[{value:"Repository Setting",id:"repository-setting",level:2},{value:"Branch Protection Rules",id:"branch-protection-rules",level:2},{value:"Personal Access Token",id:"personal-access-token",level:2},{value:"GitHub App",id:"github-app",level:2},{value:"GitHub Environment",id:"github-environment",level:2},{value:"GitHub Actions Workflows",id:"github-actions-workflows",level:2}],s={toc:u},g="wrapper";function m(e){let{components:t,...n}=e;return(0,i.yg)(g,(0,a.c)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"settings-for-team-development"},"Settings for Team Development"),(0,i.yg)("h2",{id:"repository-setting"},"Repository Setting"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Allow auto-merge")),(0,i.yg)("h2",{id:"branch-protection-rules"},"Branch Protection Rules"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"main"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Require a pull request before merging"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Require approvals")," (1 approval)"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Dismiss stale pull request approvals when new commits are pushed")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Require review from Code Owners")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Require approval of the most recent reviewable push")))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Require status checks to pass before merging"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Status checks that are required."),": ",(0,i.yg)("inlineCode",{parentName:"li"},"status-check")))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Do not allow bypassing the above settings")))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"renovate/*")," ",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Do not allow bypassing the above settings")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Restrict who can push to matching branches"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Restrict pushes that create matching branches"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"renovate")),(0,i.yg)("li",{parentName:"ul"},"Dedicated GitHub App"))))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Allow deletions"),": Allow to delete pull request branches"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Allow force pushes"),": Allow Renovate to rebase branches",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Specify who can force push"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"renovate"))))))))),(0,i.yg)("h2",{id:"personal-access-token"},"Personal Access Token"),(0,i.yg)("p",null,"You should use ",(0,i.yg)("a",{parentName:"p",href:"https://github.blog/2022-10-18-introducing-fine-grained-personal-access-tokens-for-github/"},"fine-grained personal access token")," rather than legacy access token."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Permissions:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"pull-requests: write"),": To approve a pull request")))),(0,i.yg)("h2",{id:"github-app"},"GitHub App"),(0,i.yg)("p",null,"Create a GitHub App to push commits to Renovate branches and enable auto-merge."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Permissions",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"contents: write"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Push a commit to a pull request"),(0,i.yg)("li",{parentName:"ul"},"Enable auto-merge"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"pull-requests: write"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Enable auto-merge"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"workflows: write"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Enable auto-merge of pull requests updating GitHub Actions Workflows")))))),(0,i.yg)("p",null,"If ",(0,i.yg)("inlineCode",{parentName:"p"},"workflows: write")," is missing, auto-merge is disabled."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"auto-merge was automatically disabled 8 minutes ago",(0,i.yg)("br",{parentName:"p"}),"\n","Tried to create or update workflow without ",(0,i.yg)("inlineCode",{parentName:"p"},"workflows")," permission")),(0,i.yg)("h2",{id:"github-environment"},"GitHub Environment"),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment"},"GitHub Environment")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"renovate"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"deployment branch rule: ",(0,i.yg)("inlineCode",{parentName:"li"},"renovate/*"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"main")," (",(0,i.yg)("inlineCode",{parentName:"li"},"main")," is optional)"),(0,i.yg)("li",{parentName:"ul"},"Secrets",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"APP_ID"),": GitHub App ID"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"APP_PRIVATE_KEY"),": GitHub App Private Key"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"GH_TOKEN_APPROVE_RENOVATE_PR"),": personal access token to approve pull requests")))))),(0,i.yg)("admonition",{type:"tip"},(0,i.yg)("p",{parentName:"admonition"},(0,i.yg)("inlineCode",{parentName:"p"},"main")," is optional but required to ",(0,i.yg)("a",{parentName:"p",href:"/guide-github-action-renovate/guide#optional-update-branch-of-renovate-pull-request-by-comment"},"support updating Renovate branches by pull request comment"),".")),(0,i.yg)("h2",{id:"github-actions-workflows"},"GitHub Actions Workflows"),(0,i.yg)("p",null,"Create three workflows."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"test"),": ",(0,i.yg)("a",{parentName:"li",href:"https://github.com/aquaproj/example-update-checksum/blob/main/.github/workflows/test.yaml"},"example")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"actionlint"),": ",(0,i.yg)("a",{parentName:"li",href:"https://github.com/suzuki-shunsuke/tfcmt/blob/main/.github/workflows/actionlint.yaml"},"example")),(0,i.yg)("li",{parentName:"ul"},"(Optional) ",(0,i.yg)("inlineCode",{parentName:"li"},"update-branch"),": ",(0,i.yg)("a",{parentName:"li",href:"https://github.com/aquaproj/example-update-checksum/blob/main/.github/workflows/update-branch.yaml"},"example"))),(0,i.yg)("admonition",{type:"tip"},(0,i.yg)("p",{parentName:"admonition"},(0,i.yg)("inlineCode",{parentName:"p"},"update-branch")," is optional but required to ",(0,i.yg)("a",{parentName:"p",href:"/guide-github-action-renovate/guide#optional-update-branch-of-renovate-pull-request-by-comment"},"support updating Renovate branches by pull request comment"),".")))}m.isMDXComponent=!0}}]);